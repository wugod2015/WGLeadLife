package com.jackhan.wgleadlife.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jackhan.wgleadlife.bean.LeadPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEAD_PLAN".
*/
public class LeadPlanDao extends AbstractDao<LeadPlan, String> {

    public static final String TABLENAME = "LEAD_PLAN";

    /**
     * Properties of entity LeadPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Plan_id = new Property(0, String.class, "plan_id", true, "PLAN_ID");
        public final static Property Start_date = new Property(1, java.util.Date.class, "start_date", false, "START_DATE");
        public final static Property End_date = new Property(2, java.util.Date.class, "end_date", false, "END_DATE");
        public final static Property Quantity = new Property(3, String.class, "quantity", false, "QUANTITY");
        public final static Property Unit = new Property(4, String.class, "unit", false, "UNIT");
    };

    private DaoSession daoSession;


    public LeadPlanDao(DaoConfig config) {
        super(config);
    }
    
    public LeadPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEAD_PLAN\" (" + //
                "\"PLAN_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: plan_id
                "\"START_DATE\" INTEGER," + // 1: start_date
                "\"END_DATE\" INTEGER," + // 2: end_date
                "\"QUANTITY\" TEXT," + // 3: quantity
                "\"UNIT\" TEXT);"); // 4: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEAD_PLAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LeadPlan entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPlan_id());
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(2, start_date.getTime());
        }
 
        java.util.Date end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindLong(3, end_date.getTime());
        }
 
        String quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindString(4, quantity);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
    }

    @Override
    protected void attachEntity(LeadPlan entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LeadPlan readEntity(Cursor cursor, int offset) {
        LeadPlan entity = new LeadPlan( //
            cursor.getString(offset + 0), // plan_id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // start_date
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // end_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // quantity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // unit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LeadPlan entity, int offset) {
        entity.setPlan_id(cursor.getString(offset + 0));
        entity.setStart_date(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEnd_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setQuantity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LeadPlan entity, long rowId) {
        return entity.getPlan_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LeadPlan entity) {
        if(entity != null) {
            return entity.getPlan_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
