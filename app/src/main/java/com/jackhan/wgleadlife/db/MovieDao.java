package com.jackhan.wgleadlife.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jackhan.wgleadlife.bean.Movie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, String> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Movie_id = new Property(0, String.class, "movie_id", true, "MOVIE_ID");
        public final static Property Movie_name = new Property(1, String.class, "movie_name", false, "MOVIE_NAME");
        public final static Property Movie_type = new Property(2, String.class, "movie_type", false, "MOVIE_TYPE");
        public final static Property Movie_release_date = new Property(3, java.util.Date.class, "movie_release_date", false, "MOVIE_RELEASE_DATE");
        public final static Property Movie_nation = new Property(4, String.class, "movie_nation", false, "MOVIE_NATION");
        public final static Property Movie_starring = new Property(5, String.class, "movie_starring", false, "MOVIE_STARRING");
        public final static Property Movie_length = new Property(6, String.class, "movie_length", false, "MOVIE_LENGTH");
        public final static Property Movie_picture = new Property(7, String.class, "movie_picture", false, "MOVIE_PICTURE");
        public final static Property Movie_score = new Property(8, String.class, "movie_score", false, "MOVIE_SCORE");
        public final static Property Movie_director = new Property(9, String.class, "movie_director", false, "MOVIE_DIRECTOR");
        public final static Property Movie_tags = new Property(10, String.class, "movie_tags", false, "MOVIE_TAGS");
        public final static Property Movie_message = new Property(11, String.class, "movie_message", false, "MOVIE_MESSAGE");
        public final static Property Is_imax = new Property(12, String.class, "is_imax", false, "IS_IMAX");
        public final static Property Is_new = new Property(13, String.class, "is_new", false, "IS_NEW");
        public final static Property Movie_big_picture = new Property(14, String.class, "movie_big_picture", false, "MOVIE_BIG_PICTURE");
        public final static Property Movies_wd = new Property(15, String.class, "movies_wd", false, "MOVIES_WD");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"MOVIE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: movie_id
                "\"MOVIE_NAME\" TEXT NOT NULL ," + // 1: movie_name
                "\"MOVIE_TYPE\" TEXT," + // 2: movie_type
                "\"MOVIE_RELEASE_DATE\" INTEGER," + // 3: movie_release_date
                "\"MOVIE_NATION\" TEXT," + // 4: movie_nation
                "\"MOVIE_STARRING\" TEXT," + // 5: movie_starring
                "\"MOVIE_LENGTH\" TEXT," + // 6: movie_length
                "\"MOVIE_PICTURE\" TEXT," + // 7: movie_picture
                "\"MOVIE_SCORE\" TEXT," + // 8: movie_score
                "\"MOVIE_DIRECTOR\" TEXT," + // 9: movie_director
                "\"MOVIE_TAGS\" TEXT," + // 10: movie_tags
                "\"MOVIE_MESSAGE\" TEXT," + // 11: movie_message
                "\"IS_IMAX\" TEXT," + // 12: is_imax
                "\"IS_NEW\" TEXT," + // 13: is_new
                "\"MOVIE_BIG_PICTURE\" TEXT," + // 14: movie_big_picture
                "\"MOVIES_WD\" TEXT);"); // 15: movies_wd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMovie_id());
        stmt.bindString(2, entity.getMovie_name());
 
        String movie_type = entity.getMovie_type();
        if (movie_type != null) {
            stmt.bindString(3, movie_type);
        }
 
        java.util.Date movie_release_date = entity.getMovie_release_date();
        if (movie_release_date != null) {
            stmt.bindLong(4, movie_release_date.getTime());
        }
 
        String movie_nation = entity.getMovie_nation();
        if (movie_nation != null) {
            stmt.bindString(5, movie_nation);
        }
 
        String movie_starring = entity.getMovie_starring();
        if (movie_starring != null) {
            stmt.bindString(6, movie_starring);
        }
 
        String movie_length = entity.getMovie_length();
        if (movie_length != null) {
            stmt.bindString(7, movie_length);
        }
 
        String movie_picture = entity.getMovie_picture();
        if (movie_picture != null) {
            stmt.bindString(8, movie_picture);
        }
 
        String movie_score = entity.getMovie_score();
        if (movie_score != null) {
            stmt.bindString(9, movie_score);
        }
 
        String movie_director = entity.getMovie_director();
        if (movie_director != null) {
            stmt.bindString(10, movie_director);
        }
 
        String movie_tags = entity.getMovie_tags();
        if (movie_tags != null) {
            stmt.bindString(11, movie_tags);
        }
 
        String movie_message = entity.getMovie_message();
        if (movie_message != null) {
            stmt.bindString(12, movie_message);
        }
 
        String is_imax = entity.getIs_imax();
        if (is_imax != null) {
            stmt.bindString(13, is_imax);
        }
 
        String is_new = entity.getIs_new();
        if (is_new != null) {
            stmt.bindString(14, is_new);
        }
 
        String movie_big_picture = entity.getMovie_big_picture();
        if (movie_big_picture != null) {
            stmt.bindString(15, movie_big_picture);
        }
 
        String movies_wd = entity.getMovies_wd();
        if (movies_wd != null) {
            stmt.bindString(16, movies_wd);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.getString(offset + 0), // movie_id
            cursor.getString(offset + 1), // movie_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // movie_type
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // movie_release_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // movie_nation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // movie_starring
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // movie_length
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // movie_picture
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // movie_score
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // movie_director
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // movie_tags
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // movie_message
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // is_imax
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // is_new
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // movie_big_picture
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // movies_wd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setMovie_id(cursor.getString(offset + 0));
        entity.setMovie_name(cursor.getString(offset + 1));
        entity.setMovie_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMovie_release_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setMovie_nation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMovie_starring(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMovie_length(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMovie_picture(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMovie_score(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMovie_director(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMovie_tags(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMovie_message(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_imax(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIs_new(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMovie_big_picture(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMovies_wd(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Movie entity, long rowId) {
        return entity.getMovie_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Movie entity) {
        if(entity != null) {
            return entity.getMovie_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
