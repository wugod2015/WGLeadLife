package com.jackhan.wgleadlife.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.jackhan.wgleadlife.bean.LeadPlan;
import com.jackhan.wgleadlife.bean.LeadRecord;
import com.jackhan.wgleadlife.bean.PlanRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_RECORD".
*/
public class PlanRecordDao extends AbstractDao<PlanRecord, Void> {

    public static final String TABLENAME = "PLAN_RECORD";

    /**
     * Properties of entity PlanRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Plan_id = new Property(0, String.class, "plan_id", false, "PLAN_ID");
        public final static Property Record_id = new Property(1, String.class, "record_id", false, "RECORD_ID");
    };

    private DaoSession daoSession;

    private Query<PlanRecord> leadPlan_PlanRecordListQuery;
    private Query<PlanRecord> leadRecord_PlanRecordListQuery;

    public PlanRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PlanRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_RECORD\" (" + //
                "\"PLAN_ID\" TEXT," + // 0: plan_id
                "\"RECORD_ID\" TEXT);"); // 1: record_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlanRecord entity) {
        stmt.clearBindings();
 
        String plan_id = entity.getPlan_id();
        if (plan_id != null) {
            stmt.bindString(1, plan_id);
        }
 
        String record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindString(2, record_id);
        }
    }

    @Override
    protected void attachEntity(PlanRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PlanRecord readEntity(Cursor cursor, int offset) {
        PlanRecord entity = new PlanRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // plan_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // record_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlanRecord entity, int offset) {
        entity.setPlan_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecord_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PlanRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PlanRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "planRecordList" to-many relationship of LeadPlan. */
    public List<PlanRecord> _queryLeadPlan_PlanRecordList(String plan_id) {
        synchronized (this) {
            if (leadPlan_PlanRecordListQuery == null) {
                QueryBuilder<PlanRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Plan_id.eq(null));
                leadPlan_PlanRecordListQuery = queryBuilder.build();
            }
        }
        Query<PlanRecord> query = leadPlan_PlanRecordListQuery.forCurrentThread();
        query.setParameter(0, plan_id);
        return query.list();
    }

    /** Internal query to resolve the "planRecordList" to-many relationship of LeadRecord. */
    public List<PlanRecord> _queryLeadRecord_PlanRecordList(String record_id) {
        synchronized (this) {
            if (leadRecord_PlanRecordListQuery == null) {
                QueryBuilder<PlanRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Record_id.eq(null));
                leadRecord_PlanRecordListQuery = queryBuilder.build();
            }
        }
        Query<PlanRecord> query = leadRecord_PlanRecordListQuery.forCurrentThread();
        query.setParameter(0, record_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLeadPlanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLeadRecordDao().getAllColumns());
            builder.append(" FROM PLAN_RECORD T");
            builder.append(" LEFT JOIN LEAD_PLAN T0 ON T.\"PLAN_ID\"=T0.\"PLAN_ID\"");
            builder.append(" LEFT JOIN LEAD_RECORD T1 ON T.\"RECORD_ID\"=T1.\"RECORD_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PlanRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        PlanRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LeadPlan leadPlan = loadCurrentOther(daoSession.getLeadPlanDao(), cursor, offset);
        entity.setLeadPlan(leadPlan);
        offset += daoSession.getLeadPlanDao().getAllColumns().length;

        LeadRecord leadRecord = loadCurrentOther(daoSession.getLeadRecordDao(), cursor, offset);
        entity.setLeadRecord(leadRecord);

        return entity;    
    }

    public PlanRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PlanRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PlanRecord> list = new ArrayList<PlanRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PlanRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PlanRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
